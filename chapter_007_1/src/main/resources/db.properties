db.path=jdbc:postgresql://localhost:5432/test
db.username=postgres
db.password=8088059
db.minIdle=5
db.maxIdl=10
db.MaxOpenPreparedStatements=100
db.validationQuery=SELECT 1
db.createTable=\
    CREATE TABLE IF NOT EXISTS role ( \
        id_r INTEGER PRIMARY KEY, \
        name_r VARCHAR(45) NOT NULL \
    ); \
    CREATE TABLE IF NOT EXISTS address ( \
        id_u INTEGER PRIMARY KEY, \
        country_a VARCHAR(45) NOT NULL, \
        city_a VARCHAR(45) NOT NULL \
    ); \
    CREATE TABLE IF NOT EXISTS music ( \
        id_m INTEGER PRIMARY KEY, \
        name_m VARCHAR(45) NOT NULL \
    ); \
    CREATE TABLE IF NOT EXISTS user_music ( \
        id_u INTEGER, \
        id_m INTEGER, \
        PRIMARY KEY (id_u, id_m) \
    ); \
    CREATE TABLE IF NOT EXISTS credential ( \
        id_u INTEGER PRIMARY KEY, \
        login_cr VARCHAR(45) NOT NULL, \
        password_cr VARCHAR(45) NOT NULL, \
        UNIQUE (login_cr) \
    ); \
    CREATE TABLE IF NOT EXISTS users ( \
        id_u serial PRIMARY KEY, \
        name_u VARCHAR(45) NOT NULL, \
        id_r INTEGER NOT NULL \
    ); \
    \
    ALTER TABLE users ADD CONSTRAINT fk_users_role FOREIGN KEY (id_r) REFERENCES role (id_r) ON DELETE CASCADE ON UPDATE CASCADE; \
    ALTER TABLE users ADD CONSTRAINT fk_users_credential FOREIGN KEY (id_u) REFERENCES credential (id_u) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE; \
    ALTER TABLE credential ADD CONSTRAINT fk_credential_user FOREIGN KEY (id_u) REFERENCES users (id_u) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE; \
    ALTER TABLE users ADD CONSTRAINT fk_users_address FOREIGN KEY (id_u) REFERENCES address (id_u) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE; \
    ALTER TABLE address ADD CONSTRAINT fk_address_users FOREIGN KEY (id_u) REFERENCES users (id_u) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE; \
    ALTER TABLE user_music ADD CONSTRAINT fk_usermusic_music FOREIGN KEY (id_m) REFERENCES music (id_m) ON DELETE CASCADE ON UPDATE CASCADE; \
    ALTER TABLE user_music ADD CONSTRAINT fk_usermusic_user FOREIGN KEY (id_u) REFERENCES users (id_u) ON DELETE CASCADE ON UPDATE CASCADE; \
    \
    CREATE OR REPLACE FUNCTION lastId() RETURNS int AS \
    $$ \
    BEGIN \
        RETURN (SELECT currval('users_id_u_seq')); \
    END \
    $$ LANGUAGE plpgsql; \
    \
    CREATE OR REPLACE VIEW public.users_view AS \
        SELECT usr.id_u AS id_u, \
            usr.name_u, \
            cr.login_cr AS login_u, \
            cr.password_cr AS password_u, \
            adr.country_a AS country_u, \
            adr.city_a AS city_u, \
            ro.name_r AS role_u, \
            ARRAY( SELECT mu.name_m \
                    FROM music mu \
                        JOIN user_music um ON mu.id_m = um.id_m \
                    WHERE um.id_u = usr.id_u) AS music_u \
        FROM users usr \
            JOIN credential cr ON usr.id_u = cr.id_u \
            JOIN address adr ON usr.id_u = adr.id_u \
            JOIN role ro ON usr.id_r = ro.id_r \
            JOIN user_music usr_m ON usr.id_u = usr_m.id_u \
            JOIN music mus ON usr_m.id_m = mus.id_m \
        GROUP BY usr.id_u, usr.name_u, cr.login_cr, cr.password_cr, adr.country_a, adr.city_a, ro.name_r;
db.fillRolesMusic= \
    INSERT INTO role(id_r, name_r) VALUES (1, 'ADMIN'); \
    INSERT INTO role(id_r, name_r) VALUES (2, 'MODERATOR'); \
    INSERT INTO role(id_r, name_r) VALUES (3, 'USER'); \
    INSERT INTO music(id_m, name_m) VALUES (1, 'RAP'); \
    INSERT INTO music(id_m, name_m) VALUES (2, 'ROCK'); \
    INSERT INTO music(id_m, name_m) VALUES (3, 'FOLK'); \
    INSERT INTO music(id_m, name_m) VALUES (4, 'CLASSIC');
db.query = SELECT * FROM users_view
db.queryAdd = \
        SET CONSTRAINTS ALL DEFERRED; \
        INSERT INTO users (name_u, id_r) VALUES (?, ?); \
        INSERT INTO credential (id_u, login_cr, password_cr) VALUES (lastid(), ?, ?); \
        INSERT INTO address (id_u, country_a, city_a) VALUES (lastid(), ?, ?);
db.queryAddMusic = INSERT INTO user_music (id_u, id_m) VALUES (lastid(), ?);
db.queryUpdateUser = UPDATE users SET name_u = ?, id_r = ? WHERE id_u = ?;
db.queryUpdateCredential = UPDATE credential SET login_cr = ?, password_cr = ? WHERE id_u = ?;
db.queryUpdateAddress = UPDATE address SET country_a = ?, city_a = ? WHERE id_u = ?;
db.queryUpdateMusic = INSERT INTO user_music (id_u, id_m) VALUES (?, ?);
db.queryDeleteMusic = DELETE FROM user_music WHERE id_u = ?;
db.queryDeleteUser = DELETE FROM users WHERE id_u = ?;